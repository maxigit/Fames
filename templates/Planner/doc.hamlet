$newline text
Displays a Planner (a visual view of the warehouse with its content).
The planner is a set of files using a subset of Emacs org-mode syntax (mainly headings and drawer)s.
The use of of org-mode is for convenience only and provide folding of syntax highlighting for free.
Files are read from the given subdirectory (if any) and/or read from the text area(s).
A planner file is made of different sections. Each section corresponds to an org-mode drawer (starting and finishing with <code>:</code>). A section can be used to described shelfves, boxes but also move or tag shelves.
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-sections">Sections
<div.pre.collapse :expanded:.in id=info-section-sections>
    All sections follows the <a href="http://orgmode.org/manual/Drawers.html">org-mode drawer</a> syntax and are composed of a 
    <ul>
      <li> a headline specify the section type and eventual parameters, for example <code>:Shelves:</code> or <code><:Moves_parameter1_paramter2:></code>
      <li> a body, for example <code>T-Shirt,shelf A</code>
      <li> and optional end marker <code>:END:</code>.
    Sections accepting parameters will have <code>[_parametes]</code> next to their names.
    Most sections body are a CSV (comma separated files) which expect a header (ie the name of each column).
    Forgetting the header might result in the first line be interpreted as the header and therefore skipped.
    <ul> 
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-shelves"> Shelves (Mandatory)
        <div.pre.collapse :expanded:.in id=info-section-shelves>
            Describes set of shelves. Should be a CSV with the following header :
            <pre>name,comment,length,width,height,type
            <h5> Special shelves
            The two first declared shelves have a special meaning.
            The first one is the <code>error</code> shelf and the second one is the <code>pending</code> shelf.
            The error shelf is used when ever a move try to fit more boxses than possible in the given shelf.
            All the selected boxes which doesn't fit the given location are moved to the error shelf.
            The <code>pending</code> shelf is used when creating new boxes. Boxes created using the Boxes command are
            created within the <code>pending</code> shelf.
            It is best practice to name those shelves <code>error</code> and <code>pending</code> (or equivalent).

            <h5> Name expansion
            Groups of similar shelves can be created in one line using name expansion. Before creating a shelf,
            the name is expanded into one or many shelf names. One shelf will be created of each of the resulting name.
            Shelf name are split with the <code>|</code> separator, then when encountering <code>[..]</code>, name will be expanded by generating a name for each character within the bracket.
            Example
            <pre>
              A|B => A B
              A[01] => A0 A1
              A[ABx]X => AAX ABX AxX

            More than one ranges can be provided, in this case all combinations will be generated.
            Example
            <pre>
              [ABC][123] => A1 A2 A3 B1 B2 B3 C1 C2 C3
            <h5> dimension formula 
            Shelf dimension depending on the dimension on another shelf can be expressed using shelf dimension.
            This can be useful when shelf are back to back or one shelf is not physically a shelf but the space
            leftover between a shelf and wall. Basic arithmetic can be performed and the the same dimension of another
            shelf can be referenced using <code>{...}</code>.  Wildcard (<code>_</code>,<code>+</code> and <code>-</code>) can be used to modify the corresponding character of the current shelf itsef.
            <code>%</code> can be used to match all left characters
            Example
            <pre>
              name,comment,length,width,height,type
              A1,,150,40,200,
              A2,,100,{_-},20, -- same width as A1 
              B1,,200-{A_},-- length 200 - length of A1
              B2,,200-{A_},-- length 200 - length of A2
              B20,,200-{A%},-- length 200 - length of A20
            For A2, <code>_</code> refers to the first character of the current shelf, i.e, <code>A</code> and <code>-</code> refers to the second character (<code>2</code>)  minus 1 -> <code>1</code>
            For A3, the <code>_</code> is in the second position and therefore correspond to the second character of <code>B1</code> : <code>1</code>.
            <h5>shelf types
            The shelf type determines the default boxes orientation and filling strategy. The current shelf style are
            <ul>
              <li> Shelf (normal first) : tilted row first
              <li> deadzone : allow up column first
              <li> other, column first
            <h5> Tag
            Tags can be used to select shelf when doing box moves, but is also used to
            group shelves when displaying the summary. Shelves are grouped using the <code>summary</code> property.
            Note that shelves with a summary value starting with a <code>_</code> are considered as virtual shelves and are not taken in to account when calculated used spaces
            and floor space. Also, shelves with the <code>sep</code> tag are seen as separator : shelves
            present for layout purpose only and are excluded from the summary as well as being displayed
              differently.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-layout"> Layout (Mandatory)
        <div.pre.collapse :expanded:.in id=info-section-layout>
          Describes how shelves should be displayed.
          Shelves are displayed as a matrix (row and column) of bays. A bay being a set of shelves stacked together from bottom to top.
          Each line of the layout section describe a row.
          Columns are separated by one or more space and each element of a bay by a pipe <code>|</code>

          Example: 
            <pre>
                A1|A2|A3 B1|B2
                C D E

          <code>A1|A2|A3</code> form a bay of 3 shelves, A1 at the bottom, and A3 at the top next to a bay of 2 shelves B1 with B2 on top.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-stocktake">  Stocktake[_Tag]
        <div.pre.collapse :expanded:.in id=info-section-stocktake>
          Describes a set of boxes with their location and eventually orientation. It is a CSV with the following header
          <pre>Bay No,Style,QTY,Length,Width,Height,Orientations
          Tags provided in the section name, will be applied to the created boxes.
          For example, all boxes created in the section <code>:Stocktake-tag1-tag2</code> will be tagged with <code>tag1</code> and <code>tag2</code>
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-boxes"> Boxes[=Tag]
        <div.pre.collapse :expanded:.in id=info-section-boxes>
          A set of boxes without initial location. They will be put in the <code>pending</code> shelf.
          It is a CSV with the following header :
          <pre>style,quantity,l,w,h
          Tags provided in the section name, will be applied to the created boxes.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-moves"> Moves[=Tag]
        <div.pre.collapse :expanded:.in id=info-section-moves>
          Describes a set of moves boxes to shelves. The first column describe a set of boxes to moves to
          a set of shelves. If multiple shelves are given, the Planner will fill the shelf in the given order
          and use the optimal orientation. If all boxes can't fit the given shelves, the excedendatary boxes will
          be moved to the <b>error</b> shelf.
          It is CSV with the following header:
          <pre>stock_id,location
          Please not the stock_id and location are in fact boxes and shelves selectors (see selectors sections).
          <h5> Filling order, Exit on top
          When moves boxes to a new set of shelves, shelves are filled by alphabetical order. For example
          the command
          <pre>
            :Moves:
            stock_id,location
            ,A|B|C
          Will move all boxes to the  shelves A, B and C starting by filling A, the filling B and so on.
          Boxes are stacked in column form left to right.
          It is however sometimes desirable to carry on filling the same column on the next shelf
          rather than creating a new column on the current shelf. This can be achieved by specifying
          the "exit on top" option by starting the location with <code>^</code>
          <pre>
            :Moves:
            stock_id,location
            ,^A|B|C

          The code above, will fill the first colum into shelf A, then a column in B and then C.
          When the first column in C is full, it will start a 2nd column in A, then B  etc ...
          <tagging>
          Tags provided as section parameter will be applied to the boxes <b>successfully</b> moved
          whereas boxes which couldn't be moved (not enough space in the destination) will see those tags negated.
          For example, let's say that we are trying to move 3 boxes in a shelf with <code>:Moves_moved_-error</code> but only the first 2
          are moved successfully, the two first boxes with see <code>moved</code> and <code>-error</code> applied (which result in adding the tag moved
          but remove the tag error, whilst the last box will see the <code>-moved</code> and <code>error</code> apply.
          As a result the two first boxes will have the tag <code>moved</code> and the last one the tag <code>error</code>.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-tags"> Tags
        <div.pre.collapse :expanded:.in id=info-section-tags>
          Tag allow boxes to be selected (via selector) to be either moved or tagged but also change their behavior (colour, priority, etc ...) via properties.
          A Tag can be removed by setting with <code>-</code>
          The body is a CSV with the following header
          <pre> stock_id,tag
          Example
          <pre>
            :TAG:
            stock_id,tag
            ,#tag1
            A,#-tag1
            #tag1,#bg=red

          The first line, tag all boxes with <code>tag1</code>. The second line remove <code>tag1</code> from the A boxes.
          The last line set the background property of the box tagged with <code>tag1</code> to red.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-movesandtags"> MAT[=Tag] (moves and tags)
        <div.pre.collapse :expanded:.in id=info-section-movesandtags>
          Allows to move and tag at the same time a set of boxes. This can be faster and less verbose than creating a move and
          a tag section. Tags needs to start with a <code>#</code> and location CAN start with <code>/</code>
          Example
          <pre>
            :MAT:
            stock_id,location#tag
            #new,A#-new
          Moves all new boxes (with the new tag) to A and unset the new tag. Note that tag parameters will also be added to the "per-line" tag.
          As in <code>:Moves</code> tags are applied positively to boxes successfully moved and negatively to leftover.
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-clone"> Cloning and Deleting
        <div.pre.collapse :expanded:.in id=info-section-clone>
          Allows to duplicate the given boxes. Used in conjunction with =:Deletes:= it can be used to do slotting
          by creating fake boxes (ghosts) which will make sure a slot is full and the remove later.
          For example
          <pre>
            :Clones:
            stock_id,quantity,tag
            A^1,4,ghost
          or  (note the position of the tag <code>ghost</code>
          <pre>
            :Clones-ghost:
            stock_id,quantity,tag
            A^1,4,
          will create 4 boxes with the tag <code>ghost</code> for each colur of A.
          <code>^1</code> makes sure we are doing the cloning operation once per colour. Without it, we will have 4 clones for every box.

          To create slots of for, we could move all As by 4 with
          <pre>
             :Moves:
             stock_id,location
             A^4,destination
          No more that 4 of each colour will be moved using the ghosts if necessary.
          We can then delete the ghost uting <code>:Delete:</code>
          <pre>
            :Delete:
            A#ghost
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-transformtags"> Transform (transform tags)
        <div.pre.collapse :expanded:.in id=info-section-transformtags>
          Allow to use POSIX regular expression to subsitute existing tags into new ones.
          Each tag of the selecting boxes are matched against the pattern. A set of new tags is generated
          by substituing the pattern with the substitution string  which is then splitted using <code>#</code>.
          Other tags can be removed by generating a <i>negative</i> tag (using <code>-</code>).
          The original tag is not deleted but can be done using <code>-\0</code>.
          It is a CSV with the following header
          <pre>
             stock_id,pat(tern),sub(stitue)

          Examples
          <pre>
             A,black,blue --> add the blue tag to each box of type A
             ,black,blue#-black --> replace black by blue
             ,black,blue#-\0 --> replace black by blue. (remove black)
             ,^[[:upper]],-\0 --> remove all tags starting with an uppercase
          Group (using `(..)`) can be use to extract substring
          <pre>
             ,(..)-(..),\2:\1 --> add BB:AA from the tag AA-BB
          Properties and virtual tags are expanded in the regexp itself.
          Example
          <pre>
            :TAGS:
            stock_id,tag
            ,shelfname=$shelfname -- set shelfname property using shelfname attribute
            :END:
            :TRANSFORM:
            stock_id,pat,sub
            ,location=.*$[shelfname],unmoved -- detect boxes which haven't changed

          In this example, we need to use an intermediate property <code>shelfname</code> because
          the name of the shelf can contains <code>/</code> which are replaced by <code>'</code> when the tag is set.
          For example if object A  is in location <code>W/2</code>, it will have a tag <code>location=W'2</code>
          (instead of <code>location=W/2</code>). <code>$shelfname</code> expands to <code>W/2</code> whereas the
          value of the shelfname propery will be W'2 (<code>shelfname=W'2</code>).
          This behavior might be fixed and therefore this workaround not necessary in a future versioin.
          To detect moves only if the the 3 first letter of the shelf name have changed :
          <pre>
            :TAGS:
            stock_id,tag
            ,shelfname=$shelfname -- set shelfname property using shelfname attribute
            :END:
            :TRANSFORM:
            stock_id,pat,sub
            ,shelfname=(...).*,shortshelf=\1
            ,location=(...).*,shortloc=\1
            ,shortshelf=$[shortloc],unmoved -- uses the value of shortloc property
            
      <li>
        <h4>
          <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-orientations"> Orientations
        <div.pre.collapse :expanded:.in id=info-section-orientations>
          Specifies the boxes configuration within a shelves (if they are stacked up, on the side, how many etc).
          Boxes of a given style can be given different configuration for different shelves by specifing the shelf
          in the box selector. This is a CSV with the following header:
          <code>stock_id,orientation

          Orientation must have the following format <code>min-depth : max-depth  orientations</code>
          Example:
          <pre>
            TSHIRT/#top,^
            TSHIRT,=

          All T-shirt on top shelves (with the tag <code>top</code>) are up, whereas T-shirt in other shelves
          are being laid on the side.
          <h5> Orientations
          <pre>
            * all 
            % default orientations
            ^ up
            = tilted forward
            > tilted right
            | tilted forward & right
            ' rotated up
            @ rotated side
          <h5> Depth specification
          By default, boxes are stacked using only one level of depth. This way, no boxes hide behind others and so all boxes are visible.
          To enable the use of multiple depth and allow boxes to hide each other, a minimum and max depth can set (before)
          <pre>
            ,1:4 -- allow up to 4 depth level
            ,1: -- use a mininum of 2
            ,4 -- similar to 1:4
            ,4^ -- up to 4 levels, stacking boxes up
    <div>
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-selectors">
    Boxes and shelves selector
<div.pre.collapse :expanded:.in id=info-section-selectors>
  Most operations, (moving and tagging) operates on boxes. To do so, a set of boxes is selected and then the operation is applied.
  The main way of selecting a box is by specifying a style, which will select all boxes of the given style. However, more complex selection
  can be selecting boxes by tags and locations (as well as location tag). The format of a box selector is the following

  <pre>
    style pattern <b>#</b> tag(s) pattern <b>/</b>/ location pattern <b>#</b> location tag

  Example
  <pre>
     TShirt => all boxes with the style 'TShirt'
     #white  =>  all boxes with the 'white' tag
     TShirt#white => all boxes with the style 'TShirt' AND the white tag
     /A => All boxes in the A Shelves
     #white/A* => All boxes in a shelves with the name starting with 'A' shelves AND The white tag
     TShirt/#top => ALL Tshirt on the shelf with the 'top' tag.
  <ul>
    <li>
      <h4> Glob pattern
      When selecting boxes or shelves, wildcard can be used to match the name and the tags of the box or the shelf using
      <a href="https://en.wikipedia.org/wiki/Glob_(programming)">UNIX glob pattern</a>.
      The <code>|</code> operator can also be used to give a list of alternatives.
      Example, given the location
      <ul>
        <li> A01
        <li> A02
        <li> A11
        <li> A12
        <li> B1
        <li> B2
        <li> B3
      <pre>
        A* => <b>A0</b>1 <b>A0</b>2 A03 A11 A12 A3
        ?? => B1 B2 B3 -- two characters only
        B[12] => B1 B2 -- 3 is not in the range 1-2
        A?1|B2 => A01, A11 , B2

      Please note that the syntax used to create group of shelves is only a subset of the glob pattern syntax.
      Even though pattern globing can only create disjunction (OR), conjunction (AND) can be achieve using tags.
      Example
      <pre>
        *ED|*XL => select things which are red OR extra large..
        *RED,red => tag all RED thing
        *XL,xl => tag all XL things
        #red#xl => select thing which are red AND extra large.
        
    <li>
      <h4> style pattern
      A glob pattern on the name of the box.
    <li>
      <h4> tags
      Starts should start and be separated with <code>#</code>). Only boxes with ALL tags will be selected.
      Preceding a tag with <code>-</code> means boxes wich don't have this tag.

      Example
      <pre>
        TShirt#red#-XL => all red tshirt , except the XL Ones.
    <li>
      <h4> Location pattern
      A glob pattern on the name of the shelf.
    <li>
      <h4> Location tag
      A glob pattern on the tag to select a shelf.
    <li>
      <h4> number restriction
      The <code>^</code> symbol is used to select only a certain number of boxes per variation/content, per shelf, and in total
      <pre>
         ^ content ^ shelf ^ total

      Example
      <pre>
         TShirt^^^1 => the first box containing a t-shirt.
         ^1 => The first box of each variations (colour)
         ^2^3 =>  The two first boxes of each variations, with a maximum of 3 per shelves.
    <li>
      <h4> Priority and selection order
      Boxes are selected in semi-arbitrary order which can be modified setting up priority.
      The order in which box are selected affect the way boxes are actually stacked on shelves
      but also which boxese are selected when using number restriction (see above).
      By default boxes are selected in order by
      <ul>
        <li> global priority
        <li> style name  (ascending)
        <li> style priority (priority within style)
        <li> content name
        <li> content priority (priority within content)
      By default, all priorities  are set 100. Priorities can be modified by assigning the special tags
      <ul>
        <li> <code>@global</code> global priority. Can be used to move a box first. 
        <li> <code>@style</code> priority within the same style. Can be use to move a box at the beginning of a style.
        <li> <code>@content</code> priority within box of the same content (styles and variations). Can be 
      
      For example, given fox boxes, A-Black, A-Red, B-Black, B-Red. Boxes will be stacked in the following  fs order
      <ul>
        <li> B-Black
        <li> B-Red
        <li> A-Black
        <li> A-Red
      or 
      <ul>
        <li> A-Black
        <li> A-Red
        <li> B-Black
        <li> B-Red
      
      A and B having the same global priority, the system is free to start with A or B. However, content (Black and Red) are sorted alphabetically.
      To ensure that, A is processed before B. We need to assign it a priority < 100 to A (global priority) with
      <pre>
         A,@content=1
      
      To get B-Red boxes before B-Black boxes we can assign it a priority (style priority)
      <pre>
       B-Red,@style=1

      Settings those two priorities will result in the following order :
      <ul>
        <li> A-Black # @style=100 @content=1
        <li> A-Red   # @style=100 @content=1
        <li> B-Red   # @style=1 @content=100
        <li> B-Black # @style=100 @content=100

      The content priority could be used for example, to select which one of the B-Black boxes to get first.
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-virtual-tags">
     Virtual tags
<div.pre.collapse :expanded:.in id=info-section-virtual-tags>
  Virtual tags are tags which are not set by the user, but automatically set depending the box content and/or the box itself. It allows
  to select style by variations (<code>'</code>content) and dimensions (in 1/10th of mm) (<code>'l</code>length, <code>'w</code>width,<code>'h</code>height ).

  Example
  <pre>
      TShirt#'l3500 => all T-shirt with boxes with a length of 35cm.
      TShirt#'RED  => all red T-shirt (with a content of Red)
  Virtual tags can also be used to change the dimension of a box. Setting for example the tag <code>'h3400</code> will change the box size to 34 cm.
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-property">
     Properties
<div.pre.collapse :expanded:.in id=info-section-property>
  Tags come in two flavours, tag (a simple word) or property (name <code>=</code>value). The main difference between both is assign a property value
  erase the previous one.
  For example, adding the tag <code>color-red</code> then <code>color-green</code> result in the box being tagged with two tags <code>color-red</code> and <code>color-green</code>.
  In the contrary, adding the tag <code>color=red</code> then <code>color=green</code> result in the box being tagged with one tag <code>color=green</code>. In this case,
  <code>color</code> is a property therefore  tagging with <code>color=green</code> change the value of color (previously red) to green.

  Example
  <pre>
    A,prop=first --> A boxes have the tag 'prop=first'
    B,prop=second
    ,XXX$[prop] -- create XXXfirst tag for A and XXXsecond for B

  Properties can have more than one value, which can be used for example to mix colours. Values are separated by <code>;</code> and can be added or removed using <code>=+</code> or <code>=-</code>

  For example
  <pre>
    color=red#color=green => color=green (green override red)
    color=red#color=+green => color=green;red (add green red)
    color=red;green => color=green;red (set two values : red and green)
    color=red;green,#color=-red => color=green (remove green for red and green

  <h5> rendering properties
  Some special property are used to control the rendering of of a box. For example assigning <code>bg=red</code> will set the background of the box to red.
  Those properties are
  <ul>
    <li> <code>bg</code> background colour
    <li> <code>fg</code> foreground (text) colour
    <li> <code>border</code> border colour
    <li> <code>circle</code> display a big circle of the given colour on the box. Ideal to mark boxes.
    <li> <code>title</code> text to display instead of the box name
    <li> <code>bar-title</code> text to display in the box bar (for each depth).
  There is also a special tag <code>no-bar-gauge</code> which disable the colour gauge behind box bar.

  All property colours accept more than one colours (separated by <code>;</code>) which are colour names their hexadecimal description (for example "white" or "ffffff" ) . If multiples colours are given they will be mixed.
  However, each colour can only appear once (in the list of colour). It is however possible to give more weight to a colour by prefixing its name with a underscore.
  For example 
  <pre>
      black#white => mid gray
      black#_black#white => dark gray
      black#_white#white => light gray
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-break">
     Breaks And Slots
<div.pre.collapse :expanded:.in id=info-section-break>
  Normally, when moves boxes to shelves, shelves are filled continuously without any break between
    boxes of the same dimensions. Breaks can be introduced using special break tags.
    By tagging a given box with a break tag, the box is guaranteed to either start a new shelf, a new slice (row or column depending of the shelf filling strategy)
    or a new slot (no box "behind"). The corresponding tags are
    <ul>
      <li> <code>@start=new-shelf</code> first box of an entire shelf
      <li> <code>@start=new-slice</code> first box of a row/column
      <li> <code>@start=new-slot</code> no box behind

    
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-box-attributes">
     Box attributes
<div.pre.collapse :expanded:.in id=info-section-box-attributes>
  Certain attributes like the current location or orientation of a box can be used to set a new tag
  with the corresponding value. The following attributes are available.
  <ul>
    <li> <code>${shelfname}</code> # current shelf
    <li> <code>${shelftags}</code> # tag of the current shelf
    <li> <code>${fit}</code> # How the box fits in the shelf : fit, tight, or out
    <li> <code>${orientation}</code> # current orientation
    <li> <code>${style}</code> # current box style
    <li> <code>${content}</code> # current box content (or colour)
    <li> <code>${boxname}</code> # box style + content
    <li> <code>${dimension}</code> # box dimension in cm
    <li> <code>${offset}</code> # box offset (within the shelf) in cm
    <li> <code>${coordinate}</code> # box coordinate (as if row and column of similar boxes) (start at 1)
    <li> <code>${ol}</code> $ length coordinate
    <li> <code>${ow}</code> $ width coordinate
    <li> <code>${oh}</code> $ height coordinate
    <li> <code>${@content}</code> $ content priority
    <li> <code>${@style}</code> $ style priority
    <li> <code>${@global}</code> $ global priority
  Example
  <pre>
    /pending,loc=$shelfname  => All boxes in the pending location will be tagged with "loc=pending".
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-mop-export">
     Mop export
<div.pre.collapse :expanded:.in id=info-section-mop-export>
  The location of all the boxes can be exported to MOP (via the generateMOPLocation).
  By default, locations are given for each style (regardless of the content) in the form of the pattern matching all used shelves.
  The location of a particular variation (style + content) can exported separately using the tag <code>mop-exception</code>.
  Boxes can also be excluded using the tag <code>mop-exclude</code>. This is particularey usefull to exclude shelves which shoudn't be taken into account.
  Example, to exclude all shelves starting with <code>_</code> (shelves filtered from the summary report)
  <pre>
    :TAGS:
    stock_id,tag
    /#_*,mop-exclude
    :END:
  Arbitrary comments can also be added to a box using the tag <code>mop-comment=<i>your comment</i></code>.
<h3>
  <span.data-toggler.collapsed data-toggle=collapse :expanded:.in data-target="#info-section-generic-report">
     Generic report
<div.pre.collapse :expanded:.in id=info-section-generic-report>
  A generic report can generated using special tags. All boxes will be grouped first using the special tag <code><i>report</i>-group</code>
  and then <code><i>report</i>-key</code>.
  For each group (having the same key), a line will be displayed with the content of  <code><i>report</i>-group</code> (for the first
  level of grouping) and the <code><i>report</i>-value</code> property (for boxes grouped by <code><i>report</i>-key</code>). 
  The <code>report</code> prefix can be changed by setting an alternative prefix in the parameter field. This allows multiples report
  to be defined within the same plan. 
  The following group attributes will be expanded :
  <ul>
    <li> ${count} : number of boxes within the group
    <li> ${shelf-count} : number of different shelves
    <li> ${locations} list of shelves (compacted)
    <li> ${shelves} list of shelves
    <li> ${total-volume} : total volumes in m^3
    <li> ${style-count} : number of different styles
    <li> ${content-count} : number of different content
    <li> ${dimensions-count} : number of different dimensions
    <li> ${orientations} : different orientations
    <li> ${count-orientations} : number of different dimensions
    <li> ${today} : today's date with the following format <code>YYYY-MM-DD</code>
  Symbols would can't be used without being interpreted by the parser can be expanded using
  <ul>
    <li> ${hash} <code>#</code>
    <li> ${comma} <code>,</code>
    <li> ${divide} <code>/</code>
    <li> ${dollar} <code>$</code>

  Example, to generate a valid TAG File tagging each box using its unique barcode tag with its location
  <pre>
     :TAGS:
     stock_id,tag
     ,report-key=$[barcode]
     ,"report-value=$[report-key],$location"

  Note the presence of quotes wich allow a comma to be used inside the tag field and the use of <code>$[report-key]</code> to display
  the barcode in the report
