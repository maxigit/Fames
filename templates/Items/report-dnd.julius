
function startDrag(wellId, e) {
    var well = document.getElementById(wellId);
    well.classList.add("dnd-started")
    e.target.classList.add("dragged")
    if (!e.target.id) {
        e.target.id = "dragged-" + new Date().getTime();
    }
    
    e.dataTransfer.setData("text/x-fames;target-id", event.target.id);
    e.dataTransfer.setData("text/x-fames;wellid", wellId);
    var json = JSON.stringify(getLabelValueMap(e.target));
    e.dataTransfer.setData("Text", json);
    e.dataTransfer.setData("text/plain", json);
    e.dataTransfer.dropEffect = "copy";
    e.dataTransfer.effectAllowed = "copyMove";

}
function endDrag(wellId, e) {
    e.target.classList.remove("dragged")
    $("#"+wellId).removeClass("dnd-started")

}
function dragOver(wellId, e) {
    e.preventDefault();
    // e.classList.add("dragged-over");
}
function dragEnter(wellId, e) {
    var eWellId = null;
    if (e.dataTranfer) eWellId = e.dataTransfer.getData("text/x-fames;wellid");
    if (eWellId == null || eWellId == wellId) {
      e.target.classList.add("dropzone-active");
        if(eWellId == null || e.ctrlKey) e.dataTransfer.dropEffect = "copy";
        else e.dataTransfer.dropEffect = "move";
    }
    else {
        e.dataTransfer.dropEffect = "none";
    }

        
}
function dragLeave(wellId, e) {
    e.target.classList.remove("dropzone-active");
    e.dataTransfer.dropEffect = "none";
}

function drop(wellId, e) {
    e.preventDefault();
    e.currentTarget.classList.remove("dropzone-active");
    var draggedId = e.dataTransfer.getData("text/x-fames;target-id")
    if (draggedId) {
      var dragged = document.getElementById(draggedId);
      if(e.ctrlKey) copyInputValues(dragged, e.currentTarget);
        else swapInputValues(dragged, e.currentTarget);
    } else {
        var json = e.dataTransfer.getData("text/plain");
        applyObject(JSON.parse(json), e.currentTarget)
        
    }

}

// Swap value of inputs using the label as key
// We can't use the name as they are different and generated by Yesod
// we assume both object have the same key
function swapInputValues(p1, p2) {
    m1 = getLabelInputMapByIdx(p1);
    m2 = getLabelInputMapByIdx(p2);

    for(var key in m1) {
        var input1 = m1[key];
        var input2 = m2[key];
        if (input1 && input2) {
            var value = input1.value;
            input1.value = input2.value;
            input2.value = value;
        }
    }


}

function copyInputValues(p1, p2) {
    m1 = getLabelInputMapByIdx(p1);
    m2 = getLabelInputMapByIdx(p2);

    for(var key in m1) {
        var input1 = m1[key];
        var input2 = m2[key];
        if (input1 && input2) {
            input2.value = input1.value;
        }
    }


}
function applyObject(json, e) {
    m1 = getLabelInputMapByLabel(e);
    for (var key in json) {
        var input = m1[key];
        if (input) {
            input.value = json[key];
        }
        
    }
    
}

// get all input
function getLabelInputMapByIdx(elem) {
    var result = {};
    $(elem).find('label[for]').each(function (i, label) {
          result[i] = document.getElementById(label.getAttribute('for'));
      }
    );
    return result;
}

function getLabelInputMapByLabel(elem) {
    var result = {};
    var map = {"type 2":"type", "type 3":"type",
               "Band": "Panel", "Series": "Panel", "Columns":"Panel" };
    $(elem).find('label[for]').each(function (i, label) {
        // we need to alter the key so that trace1 trace2 etc are trace
        var key0 = label.innerText;
        var key = map[key0] || key0;
        result[key] = document.getElementById(label.getAttribute('for'));
      }
    );
    return result;
}

function getLabelValueMap(elem) {
    var map = getLabelInputMapByLabel(elem);
    for (var key in map) {
        input = map[key];
        if (input) {
            map[key] = input.value
        }
        
    }
    return map;
}
