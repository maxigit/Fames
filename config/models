User sql=fames_user
    Id sql=user_id
    ident Text
    password Text Maybe default=NULL
    UniqueUser ident
    deriving Typeable
Email sql=fames_email
    email Text
    userId UserId Maybe
    verkey Text Maybe default=NULL
    UniqueEmail email

-- By default this file is used in Model.hs (which is imported by Foundation.hs)

BarcodeSeed sql=fames_barcode_seed
    prefix Text 
    lastUsed Int
    UniqueBCSeed prefix
    deriving Eq
    deriving Show
-- | Anybody working in the company
-- Used to record how has done a stocktake
-- or manage payroll
Operator  sql=fames_operator
  Id sql=operator_id
  firstname Text
  surname Text
  nickname Text
  active Bool
  UniqueNickname nickname
  deriving Eq
  deriving Show
  deriving Ord


-- Represent the key of a document which has been processed.
-- We use a key SHA1 or SHA256 so we can detect if a document
-- has already been processed or not. We don't save the documenty yet.
-- In the future it can be used to retrieve from an external system (git-annex, syncthing, etc ...)
DocumentKey sql=fames_document_key
  Id sql=document_key_id
  type Text sql=document_type
  name Text
  comment Text
  key Text sql=document_key
  userId UserId 
  processedAt UTCTime
  UniqueSK key
  deriving Eq
  deriving Show
-- * Stocktake
-- ** Stocktake Adustment
-- | A stock adjustment. can generate one more real (FA) adjustemnt and transfer
StockAdjustment sql=fames_stock_adjustment
  Id sql=stock_adj_id
  comment Text
  date UTCTime
  status PendingStatus
  user UserId 

StockAdjustmentDetail sql=fames_stock_adj_detail
  Id sql=stock_adj_detail_id
  adjustment StockAdjustmentId sql=stock_adj_id
  stockId Text
  quantity Int
  from FA.LocationId Maybe sql=loc_from default=NULL
  to FA.LocationId Maybe sql=loc_to default=NULL
  deriving Show


-- ** Stocktake
-- Stocktake. How many items are in a box.
-- index allows to have multiple variations in the same box.
-- The link to Boxtake is a "soft" link via barcode.
-- history allows to keep an history of who and when
-- a stocktake has been done many time.
-- This happend is a box hasn't been opened between
-- different stocktake and the barcode is reused.
-- history is a list of past event occured on the take.
-- As a barcode is unique
Stocktake sql=fames_stocktake
  Id sql=stocktake_id
  stockId Text sql=stock_id
  quantity Int
  barcode Text
  index Int default=1
  faLocation FA.LocationId sql=loc_code
  date Day
  active Bool default=True
  operator OperatorId sql=operator_id
  adjustment StockAdjustmentId Maybe sql=stock_adj_id
  documentKey DocumentKeyId sql=document_key_id
  history (Pairs Day (Key Operator))
  comment Text Maybe default=NULL
  UniqueSB barcode index
  deriving Eq
  deriving Show

-- ** Boxtake
-- Similar to stocktake but doesn't care about the content.
Boxtake sql=fames_boxtake
  Id sql=boxtake_id
  description Text Maybe default=NULL
  reference Text
  length Double
  width Double
  height Double
  barcode Text
  location Text sqltype=Blob
  date Day
  active Bool
  operator OperatorId sql=operator_id
  documentKey DocumentKeyId sql=document_key_id
  locationHistory (Pairs Day (Text))
  UniqueBB barcode
  UniqueBK documentKey reference
  deriving Eq
  deriving Show

-- ** Packing list
-- | A Packing lista (box descriptions: dimension + content)
PackingList sql=fames_packinglist
  Id sql=packinglist_id
  invoiceRef Text
  vessel Text Maybe default=NULL
  container Text Maybe default=NULL
  documentKey DocumentKeyId sql=document_key_id
  -- comment Text Maybe Not needed in Docu default=NULL
  boxesToDeliver_d Int
  departure Day Maybe
  arriving Day Maybe
  UniquePL invoiceRef
  deriving Eq
  deriving Show
-- | Detail of a packing list , correspong to one box
PackingListDetail sql=fames_packinglist_detail
  packingList PackingListId sql=packinglist_id
  style Text
  content (Map Text Int) 
  reference Text
  boxNumber Int
  barcode Text
  length Double
  width Double
  height Double
  weight Double
  delivered Bool default=False
  UniquePLD packingList reference style boxNumber
  UniquePLB barcode
  deriving Show

-- * Payroll

--| A timesheet corresponds to a full payroll "invoice"a.
-- It includes all the shift per operator, but also extra costs and deductions.
Timesheet sql=fames_timesheet
  Id sql=timesheet_id
  reference Text -- unique, used to 
  documentKey DocumentKeyId sql=document_key_id
  start Day
  end Day
  frequency PayrollFrequency sqltype=varchar(20)
  status PendingStatus
  Unique TSR reference
  Unique TSD start frequency

-- | A homogenous set of work by an operator.
-- Should normally be done day, but could also span multiple days
-- (for monthly pay for example)
PayrollShift sql=fames_payroll_shift
  timesheet TimesheetId sql=timesheet_id
  duration Double
  cost Double
  operator OperatorId sql=operator_id
  date Day Maybe
  type Text -- normal, holidays etc ...
  
-- | Any extra expenses 
-- Costs are added to the bill, whereas deduction are deducted from the operator wages
PayrollItem sql=fames_payroll_item
  timesheet TimesheetId sql=timesheet_id
  amount Double
  type CostOrDeduction
  operator OperatorId sql=operator_id
  payee Text -- who to pay at the end, example PAYE or HMCTS (court order)
  glAccount Text -- might allow to find payee


-- Precalculate the categories  for all items
-- so that we can join on it and use categories in direct sql
-- we double the unique field to generate indexes in both way
ItemCategory sql=fames_item_category_cache
  Id sql=item_category_id
  stockId Text 
  category Text
  value Text
  Unique ICSC stockId category
  Unique ICCS category stockId

-- | Category for customers
CustomerCategory sql=fames_customer_category_cache
  Id sql=customer_category_id
  customerId Int 
  category Text
  value Text
  Unique CUCC customerId category
  Unique CCUS category customerId

-- | Category for orders
OrderCategory sql=fames_order_category_cache
  Id sql=order_category_id
  orderId Int 
  category Text
  value Text
  Unique COCC orderId category
  Unique CCOS category orderId

-- | Category for dates
-- DateCategory sql=fames_date_category_cache
-- Id sql=date_category_id
-- dateId Int 
-- category Text
-- value Text
-- Unique CDCC dateId category
-- Unique CCDS category dateId

-- * FrontAccounting
-- FrontAccounting Fames many to many relation table
-- Link Fames "event" to FA Transaction
TransactionMap sql=fames_transaction_map
  faTransType FATransType sqltype=Int
  faTransNo Int
  eventType EventType sqltype=Int
  eventNo Int
  voided Bool default=false
  deriving Eq 
  deriving Show 

-- * Batch Match
-- A batch, it's name
Batch sql=fames_batch
  Id sql=batch_id
  name Text
  alias Text Maybe -- used to display batch name in the outside workd (e.g. cutomers)
  supplier Text Maybe
  material Text Maybe
  season Text Maybe -- eg SS18 for Spring Summer 2018
  description Text Maybe
  date Day 
  UniqueBName name
  deriving Show

-- Correspondance betweens colours of different batches
BatchMatch sql=fames_batch_match
  Id sql=batch_match_id
  source BatchId
  sourceColour Text
  target BatchId
  targetColour Text
  operator OperatorId Maybe sql=operator_id -- no operator means guessed
  score MatchScore
  comment Text Maybe
  date Day
  documentKey DocumentKeyId sql=document_key_id
  deriving Show
  deriving Eq

-- * Tax Report
-- An instance of a report
TaxReport sql=fames_tax_report
  Id sql=tax_report_id
  type Text
  reference Text
  start Day
  end Day
  status PendingStatus
  submittedAt UTCTime Maybe
  externalReference Text Maybe
  externalData Value Maybe
  UniqueTR type reference
  UniqueTS type start
  deriving Show
  deriving Eq

-- Data submitted 
TaxReportBox TaxReportDetail sql=fames_tax_report_box
  Id sql=tax_report_boxes
  report TaxReportId sql=tax_report_id
  name Text
  value Decimal
  UniqueRT report name
  deriving Show
  deriving Eq

-- Details, match FA transaction. May contains
-- Amounts are repeated as they correspond
-- to what has actually been submitted, instead
-- of what is in FA db. May differ if data are modified
-- in FA.
TaxReportDetail sql=fames_tax_report_detail json
  Id sql=tax_report_detail_id
  report TaxReportId sql=tax_report_id
  taxTransDetail FA.TransTaxDetailId sql=tax_trans_detail_id
  netAmount Double
  taxAmount Double
  rate Double
  bucket Text -- ^ 
  -- denormalization ?
  -- use fatrans map ?
  faTransType FATransType sqltype=Int
  faTransNo Int
  faTaxType Int
  -- mainly to have an index to optimize load bucket summary
  UniqueBRT report bucket rate taxTransDetail
  UniqueBTR taxTransDetail report
  deriving Show
  deriving Eq


-- * Item cost check
-- Defines a group of item cost transaction
-- known to be correct, in the way
-- that the sum of the faAmount matches exactly the sum of the correctAmount
ItemCostValidation sql=check_item_cost_validation
  Id sql=item_cost_validation_id
  comment Text
  userId UserId
  validationDate Day
  lastTransaction Day
  voided Bool
  total Double
  -- firstTransaction Day

-- Gather the information coming a stock moves and
-- it's corresponding gl_trans
-- Some transaction coming from manual adjusment
-- on a stock account might not have a corresponding stock moves
ItemCostTransaction sql=check_item_cost_transaction
  Id sql=item_cost_transaction_id
  date Day
  moveId Int Maybe
  glDetail Int Maybe
  faTransNo Int
  faTransType FATransType sqltype=Int
  sku Text Maybe
  account Text
  faAmount Double
  correctAmount Double
  qohBefore Double
  qohAfter Double
  quantity Double
  costBefore Double
  cost Double
  costAfter Double
  stockValue Double
  faStockValue Double
  moveCost Double -- current transaction cost price
  itemCostValidation ItemCostValidationId Maybe
  comment Text
  UniqueM moveId !force
  UniqueG glDetail !force
  deriving Show
  deriving Eq


-- | Keep the last information 
-- move and details can be used to filter stock_moves and gl_trans
ItemCostSummary sql=check_item_cost_summary
  Id sql=item_cost_transaction_id
  date Day
  moveId Int Maybe
  glDetail Int Maybe
  sku Text Maybe
  account Text
  qohAfter Double
  costAfter Double
  stockValue Double
  faStockValue Double
  validated Bool
  UniqueAS  account sku !force
  -- in theory we don't the account, but we might if the account changed in the lifetime of an item
  deriving Show
  deriving Eq

-- * Shipping information
-- | Mapping between free address/contact
-- to structured information needed by courrier
-- Address post code, contact phone etc
-- The details can be found using a key
-- with a hash of all the details information.
-- Maybe value are unknown and could be overriden
-- by other information sources.

ShippingDetails sql=fames_shipping_details
  Id sql=shipping_details_id
  courrier Text
  key Text -- | Hash of all words sorted alphabetically. Might contains the key type
  shortName Text -- | reference
  postCode Text
  country CountryCode Maybe
  organisation Text
  address1 Text -- | property street
  address2 Text -- | Locallity
  town Text     -- | address 3
  contact Text -- |
  county Text -- | addree 4
  telephone Text Maybe
  notificationEmail Text Maybe
  notificationText Text Maybe
  taxId Text Maybe
  UniqueCB courrier key
  deriving Show
  deriving Eq
  deriving Ord




  







  
          
